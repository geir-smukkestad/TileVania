Intellisense not working?
	- Edit -> Preferences -> External Tools
		- Editor: Visual Studio Code
		- Tick Embedded packages
		- Tick Local packages
		- Click "Regenerate project files"

----------------
----------------

 Rule tiles:
   Package manager -> 2D Tilemap Extras
   
Animation:
- Choose sprites:
	- right-click, create animation
	- Select "player"-object: Add "animation controller"
- Show "animator"-vindu
- Drag the animation over to the "Animator"
- Make transitions via right-click menu
	
Collision/gravity against platform:
	- Add "tilemap collider 2D to Platforms Tilemap
	  Rigidbody was added automatically. Change type to "static"
	- Unify collision area: Add "composite collider 2D"
	- On "Tilemap collider 2D", check "used by composite"
    - Player:
		- Add Capsule Collider 2D
			- Edit collider to fit sprite
		- Add Rigidbody 2D
			Constraints -> Freeze rotation "Z"
   
User input:
  - Install package: Input System
  - Player: Add component -> Player Input
  - Player Input:
		- Create Actions -> Choose file location. Named "Input System"
		- Drag the created action into the component
  - Double-click the action in the project window: Assign actions and input (e.g. jump)
  - Player Input: "Open Input Settings" -> "Create Settings Asset"

Player Movement
	- Add Player Movement script
	- NB!! Player -> Rigidbody -> Collision Detection: ***"Continuous"**
	- Jump: Add new action in "Input System" asset
	- Project Settings -> Physics2D -> Collision Matrix
	
Climbing:
	- Add "Climbing" tilemap
	- Add "Tilemap Collider" and "Composite Collider 2D". 
	- Check "Tilemap Collider": Used by composite
	- Add layer and sorting layer	
	- Ladder sprite -> Sprite Editor -> Custom Physics Shape" in top left menu
		- Specify collider shape by dragging
		- Click "Apply"
	- Change animation from script:
		- Fetch Animator object
		- Change animator variable value: SetBool("varname", true)
	
Cinemachine:
	- Install via Package Manager
	- Right-click in hierarchy: 
		- Cinemachine -> Virtual Camera
	- Virtual Camera properties:
		Body: Framing Transposer
		Follow: Player
	- Select "Body" component in play mode to display camera boundaries, dampenings etc.
	- Cinemachine Confiner:
		- Background Tilemap:
			- Add component: Polygon Collider 2D 
			- Edit Collider -> Specify collider contour
		- Select virtual camera
			- Click "Extensions" in properties
			- Select Cinemachine Confiner
			- Provide "Bounding Shape 2D" by dragging "Background Tilemap" into it
		- Click "Play" => Player isn't visible because we have a collision conflict,
		  since the background now has collision on it. Player and background are both on the default layer.'
		- Add "player" and "background" layers and assign to player and background
		- Edit -> Project Settings -> Physics2D -> Layer Collision matrix:
			- Uncheck all boxes for "background" layer
			
	- State-driven camera:
		- Right-click in hierarchy:
			- Cinemachine -> State-Driven Camera
			- Delete the default camera within the State-Driven one
			- In hierarchy, group the existing Virtual Camera "Run-Camera" as a child of the new State-Driven camera
		- State-Driven camera properties:
			- Animated target: Select Player
			- Create new states to connect idle-camera to idle animation and the same for run-camera
		- Idle camera:
			- Adjust lens ortho size to make it differ from the run-camera
			- Note: In order to see the changes whne updating ortho size: Click "Solo" in properties
		- State-Driven camera properties:
			- Set up custom blends to specify transitions between cameras
				- Custom Blends: Create Asset
			- Set "wait time" for idling state to delay the transition run -> idle
			
Physics2D materials:
	- Import mushroom sprite
	- Create new 2D object: Tilemap -> rectangular (Bouncing Tilemap)
		- Add Tilemap collider 2D, Composite collider 2D.
		- Rigidbody will be created automatically
			- Body type -> Static
	- Drag mushroom sprite into tilemap
		- Save asset in "Tiles"
		- Mushroom is small. Change "pixels per unit" -> 32, "apply"
	- Sprite editor:
		- Create "custom physics shape". Draw, then click "apply"
	- Set sorting layer to "platforms" in order for the mushroom to be drawn
	- Create a new layer: "Bouncing", and assign it to the tilemap
	- New materials folder under assets	
	- Create -> 2D -> Physics material 2D (bouncy)
		- Set bounciness to 1.5 (1 means bounces back to same height)
		- Drag material over to "Tilemap Collider 2D" on the "Bouncing Tilemap"
		
	- Prevent player from gripping to the wall when jumping:
		- Create new physics material 2D
		- Set friction to 0 on the physics material
		- Drag on to player's collider
	- Prevent player from double-jumping when close to wall:
		- Add new Box Collider 2D to the player
		- Edit it: Box placed at the feet.
		- Edit player movement script: Change m_collider to be the box collider
		  => OnJump will test for the feet collider instead of the body (capsule) collider
		
Enemy character:
	- Create empty Game Object -> Enemy
	- Create Rigid Body 2D
		- Body type -> Kinematic (gravity not needed)
	- Create Sprite Renderer
	- Drag one enemy sprite over to the renderer
	- Create sorting layer, place being "Player" layer
	- Sprite renderer -> Sorting layer -> Enemy
	- Create Capsule Collider 2D
		- Edit collider
	- Create Animator
	- Select Animations node in "Project" window
		- Right-click -> Create -> Animator Controller
	- Select enemy sprites
		- Right-click -> Create -> Animation. Check "Loop time" property
	- Place both in "Animations" folder
	- Drag the created animation over to the new animation controller
	- Select Enemy game object
		- Drag enemy animation controller over to the game object's animator
		
Make enemy turn when hitting wall
	- Create new script in scripts folder -> EnemyMovement
		- Set rigidbody speed in script
	- Add Box Collider 2D
		- Tick "Trigger"
		- Rectangle below ground
	- Add OnTriggerExit2D in script
		- Negate speed
		- Set transform.localScale sign according to sign(moveSpeed)
	- Add layer "Enemy"
	- Assign to enemy prefab
	- Project settings -> Collision matrix -> Tick away everything on "Enemy" except "Player"
		
Player death state:
	- Disable all running, controls etc. if the player touches the Enemy layer
	- Player animator controller:
		- Add new parameter: Trigger -> Dying
		- Select sprite indicating dead player:
			- Right-click -> Create -> Animation
			- Drag it into animation controller
			- Create transition from "Any state" to the new "Player Dying" state.
			- Select transition settings:
				- Transition duration: 0.0
				- Conditions: Click "+" button
					- Select Dying
	- Death "kick":
		- Set velocity from script when the player hits the enemy
		
Adding hazards:
	- New tilemap: Hazards
	- Add new Hazards layer and assign the tilemap to it
	- Add Hazards sorting layer and set it on the tilemap renderer
	- Select "Spikes" sprite
		- Sprite editor
		- Custom physics shape -> Edit shape to match sprite -> Apply
	- Tilemap: Add component -> Tilemap collider 2D
	- Drag Spike sprite into the Tile Palette
	- Make sure Hazards tilmap is active
		- Drag spike from tilemap into scene
	- In player movement script:
		- Extend the IsTouchingLayers in CheckAliveState with "Hazards"
	- The player won't die when touching spike, since the Feet collider collides with the Spike collider,
	  so it won't reach the point where it touches the layer.
		=> Fix it by making the Hazards collider a trigger.
		
Gun:
	- Edit Player prefab
		- Add empty Game Object -> Gun
		 - Select Gun and move to desired position on player
	- Drag a player sprite into the hierarchy
		- Rename to bullet
		- Put on Player sorting layer
	- Add new layer "Bullets", assign to the bullet object
	- Edit project settings -> Physics2D -> Collision matrix: Bullets collide with ground, enemies, hazards and bullets
	- Drag bullet object into prefab folder to make a prefab
		- Change colour to stand out from player
		- Change scale so it's a bit smaller
	- Double-close on Input Actions: See that "Fire" is left mouse button. OK
	- PlayerMovement.cs: Add OnFire function
		- Instantiate a bullet:
			- Add new SerializeField: GameObject m_bullet.
			- Drag Bullet prefab into the field
			- Add new SerializeField: Transform m_gunTransform
			- Instantiate(m_bullet, m_gunTransform.position, m_gunTransform.rotation);
	- Bullet prefab:
		- Add Rigidbody2D
			- Body type "Dynamic"
			- Gravity Scale: 0
			- Collision detection: Continuous
		- Add CapsuleCollider2D:
			- Edit collider
	- Scripts folder: Add C# script: Bullet
		- Store rigidbody in Start()		
		- SerializeField float m_bulletSpeed
		- Set m_rigidBody.velocity in Update()
		- Add script to Bullet prefab
	- Make sure bullet is fired in player's direction:
		- Store ref to PlayerMovement in Bullet.cs
		- Use playerMovement.transform.localScale.x to set horizontal speed in Start()
	- Destroy bullet when it hits:
		- Add tag: Enemies. Assign to enemy prefab
		- OnCollisionEnter2D: Destroy collision object if tag == "Enemies". Also destroy *this*, i.e. gameObject
		
Create levels:
	- Prefab cameras
	- Project folder: Rename Scenes node to Levels
	- Select the Scene nodde and duplicate twice using CTRL+D
	- Add scenes to Build Settings: File -> Build Settings -> Drag scenes into list
	- Note: After prefabbing cameras, we may have to reassign:
		- "Animated target" on state-driven camera
		- "Follow" on virtual cameras
		- Cinemachine confiner Bounding Shape 2D on virtual cameras		
	
Level exit portal:
	- Add new 2D sprite object in hierarchy
	- Drag Exit sprite over to sprite renderer'
	- Add new layer and sorting layer: Interactables
	- Add Box Collider 2D, Trigger
	- Make it a prefab
	- Create new script, LevelExit
		- OnTriggerEnter2D: SceneManager.sceneCountInBuildSettings, SceneManager.GetActiveScene().buildIndex, SceneManager.LoadScene
		- Delay:
			StartCoroutine(LoadNewLevel());
			
		    IEnumerator LoadNewLevel()
			{
				yield return new WaitForSecondsRealtime(m_levelLoadDelay);
				...
				body
			}
			
Game Manager
	- In level 1, create empty GameManager
	- Create GameManager script
	- Make it a prefab
	- Edit script. Make it a singleton by destroying all objects in Awake() if a GameManager already exists
		int gameManagerCount = FindObjectsOfType<GameManager>().Length;
		DontDestroyOnLoad();
	- Public method: ProcessPlayerDeath(). Call it from PlayerMovement.
	- Instantiate GameManager in all levels
	
Coin pickup:
	- Create empty game object: Coin
	- Add sprite renderer
	- Drag coin sprite into it
	- Assign to Interactables layer and sorting layer
	- Add circle collider 2D, set as Trigger
	- Add Animator component
	- Select all coin sprites:
		- right click -> Create Animation: Coin Spin
		- Tick loop time
		- Move it to Animations folder
		- Right-click -> Create Animator Controller: Coin
		- Drag Coin Spin animation into it.
	- Select Coin gameobject in hierarchy
	- Drag Coin animator controller to the Animator component
	- Create script: CoinPickup (add to game object)
		- OnTriggerEnter2D
		- Destroy(gameObject) if tag == "Player"
	- Play sound:
		- Create Audio asset folder		
		- Drag coin pick up audio file into it
		- Select Coin prefab
		- Add AudioSource component, tick off "Play On Awake"
		- CoinPickup script
			- Add AudioClip (SerializeField)
			- Drag audio asset into it
			- OnTriggerEnter2D:
				PlayClipAtPoint - will continue playing after GameObject is gone
					Play at Camera.main.transform.position to ensure equal sfx regardless of coin position
					(Camera.main corresponds to first camera having tag "MainCamera")
					
Persistent score and lives:
	- Create -> Ui -> Canvas
	- On Canvas Scaler component: Scale with screen size
	(Could also set reference resolution below)
	- On Canvas, right-click -> Ui -> TextMeshPro
		Click "Import TMP essentials"
	- Place text in upper left corner of canvas (can zoom to selected object via 'F')
	- Update font size
	- Download font (e.g. from dafont.com)
		- Create Fonts folder in assets
		- Drag downloaded font into it
		- Window -> TextMeshPro -> Font Asset Creator
		- Drag font asset into "Source font file"
		- Click generate font atlas
		- Click Save (into fonts asset folder) and exit dialog
		- Select text
		- Drag created font asset into Font Asset
	- Anchor in the top left
	- Duplicate text object (Score Text) and move right
	- Right-align
	- Click on EventSystem node
		Gets warning: You're using StandaloneInputModule, which uses the old InputManager...
		Click "Replace with InputSystemUIInputModule" button to resolve	
	- Updating text in-game:
		- GameManager script:
			- Text members (TextMeshProUGUI): livesText and scoreText
			- Drag texts from hierarchy to fields
		- Display lives text:
			- m_livesText.text = m_playerLives.ToString()
	- Make Canvas persist when losing a life:
		*** Make the canvas a child of the GameManager singleton in the hierarchy ***
		(The same behaviour, i.e. don't destroy on load etc., will be applied to the children)
		
Scene persist (remember which coins are taken):
	- Create Scene Persist game object
	- Create ScenePersist script and attach it
	- Prefab Scene Persist
	- Drag coins group to be a child of the Scene Persist node
	- ScenePersist script:
		- Make it a singleton in the same way as for GameManager (Awake)
	- Instantiate ScenePersist prefab in Level2
		- Drag coins and enemies within ScenePersist
	- Repeat for level 3
	- Need to reset ScenePersist game object when:
		- player reaches the next level
		- player loses the last life (i.e. game is restarted)
		- Solve by making a public method on ScenePersist that destroys the game object
			- Call from SceneExit and ResetGameSession
			
Prefab variants:
	- Given an instance of a prefab:
		- E.g. scale it and drag it into the project: Get a choice to create a prefab variant
		- A prefab variant refers to the original prefab, i.e. changing the original affects the variant
		- Could be used to create e.g. a big coin with a bigger score (serialize field value)